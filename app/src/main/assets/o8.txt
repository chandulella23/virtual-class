#include<pthread.h>
#include<stdio.h>
void *fun1();
void *fun2();
int shared=1; //shared variable
pthread_mutex_t l; //mutex lock
int main()
{
pthread_mutex_init(&l, NULL); //initializing mutex locks
pthread_t thread1, thread2;
pthread_create(&thread1, NULL, fun1, NULL);
pthread_create(&thread2, NULL, fun2, NULL);
pthread_join(thread1, NULL);
pthread_join(thread2,NULL);
printf("Final value of shared is %d\n",shared); //prints the last updated value of shared variable
}

void *fun1()
{
    int x;
    pthread_mutex_lock(&l);    //thread one acquires the lock. Now thread 2 will not be able to acquire the
                              //lock until it is unlocked by thread 1
    x=shared;                 //thread one reads value of shared variable
    x++;                      //thread one increments its value
    sleep(1);                 //thread one is preempted by thread 2
    shared=x;                //thread one updates the value of shared variable
    pthread_mutex_unlock(&l);
}

void *fun2()
{
    int y;
    pthread_mutex_lock(&l);
    y=shared;
    y--;  
    sleep(1);  
    shared=y; 
    pthread_mutex_unlock(&l);
}